
#只是%f时表示原值，默认是小数点后5位数  
print "PI=%f" % math.pi       # output: PI=3.141593  
  
#只是%9f时，表示打印长度9位数，小数点也占一位，不够左侧补空格  
print "PI=%9f" % math.pi      # output: PI=_3.141593  
  
#只有.没有后面的数字时，表示去掉小数输出整数，03表示不够3位数左侧补0  
print "PI=%03.f" % math.pi     # output: PI=003  
  
#%6.3f表示小数点后面精确到3位，总长度6位数，包括小数点，不够左侧补空格  
print "PI=%6.3f" % math.pi     # output: PI=_3.142  
  
#%-6.3f表示小数点后面精确到3位，总长度6位数，包括小数点，不够右侧补空格
print "PI=%-6.3f" % math.pi     # output: PI=3.142_  

%d整数

print(, end='\t') # end='\t'结束时加一个缩进

print()默认打印结束换行

_ in range的_为临时变量

range(1,100)表示从1到100计数不包括1和100

random.ranint(1,100)表示从1到100的随机数包括1和100

time.time()返回的是从1970年1月1日0点0分0秒到当前时间的秒数精确到毫秒

input（）输入的都是字符串类型

模块和包名：全小写字母，尽量简单。若多个单词之间用 下划线

函数名：全小写字母，多个单词之间用下划线隔开

类名：首字母大写，采用驼峰原则。多个单词时，每个单词第一个字母大写，其余部分小写 

常量名：全大写字母，多个单词使用下划线隔开

[]为列表（）为元组 {}为字典和集合

tuple(seq)将列表转换为元组

list(seq)将元组转换为列表

字典为键值 d = {key1 : value1, key2 : value2 }

集合 d = {value,value1}

元组，列表L[1:5]截取元素，从第二个开始到第五个的元素，从0开始1为2

元组不能删除和修改元素

list.append(obj)在列表末尾添加新的对象

list.insert(index, obj)将对象插入列表

list.remove(obj)移除列表中某个值的第一个匹配项

and运算符为两边都为True则返回True

or运算符为一边为True则返回True

not运算符为当前运算相反的结果

in运算符为如果在指定的序列中找到值返回 True

not in为如果在指定的序列中没找到值返回True

__name__ == '__main__' 当运行模块被执行的时候，name等于文件名（包含了后缀.py）；
如果模块被import到其他模块中，则name等于模块名称（不包含后缀.py）。
而“main”始终等于当前执行文件的名称（包含了后缀.py）。
只有被Python解释器直接执行的模块的名字才是__main__

print("I'm %s. I'm %d year old" % ('Vamei', 99))
上面的例子中，"I'm %s. I'm %d year old" 为我们的模板。%s为第一个格式符，表示一个字符串。%d为第二个格式符，表示一个整数。('Vamei', 99)的两个元素'Vamei'和99为替换%s和%d的真实值。 
在模板和tuple之间，有一个%号分隔，它代表了格式化操作。

整个"I'm %s. I'm %d year old" % ('Vamei', 99) 实际上构成一个字符串表达式。我们可以像一个正常的字符串那样，将它赋值给某个变量。比如:
a = "I'm %s. I'm %d year old" % ('Vamei', 99)
print(a)

%s    字符串 (采用str()的显示)
%r    字符串 (采用repr()的显示) 输出带‘’%s不带
%c    单个字符
%b    二进制整数
%d    十进制整数
%i    十进制整数
%o    八进制整数
%x    十六进制整数
%e    指数 (基底写为e)
%E    指数 (基底写为E)
%f    浮点数
%F    浮点数，与上相同
%g    指数(e)或浮点数 (根据显示长度)
%G    指数(E)或浮点数 (根据显示长度)
%%    字符"%"

%[(name)][flags][width].[precision]typecode
(name)为命名
flags可以有+,-,' '或0。+表示右对齐。-表示左对齐。' '为一个空格，
表示在正数的左侧填充一个空格，从而与负数对齐。0表示使用0填充。
width表示显示宽度
precision表示小数点后精度

print(f'')和.format()一样

类的实例就是类的对象

class AssignValue(object):
    def __init__(self, value):
        self.value = value
my_value = AssignValue(6)
print('value 为: {0.value}'.format(my_value))
self代表类的实例，上面代码的实例是my_value，{0.value}意思是my_value.value也可以看做是self.value,
当中的0是my_value因为format函数只有一个参数所以是0，
__init__是初始化实例的值.这些值一般要供其他方法调用，相当于Java和类名相同的构造函数

my_list = ['菜鸟教程', 'www.runoob.com']
print("网站名：{0[0]}, 地址 {0[1]}".format(my_list))  # "0" 是必须的
因为format只有一个参数而这个参数是列表所以如果不写成{0[0]}{0[1]}而是{[0]}{[1]}程序会提示超出范围


